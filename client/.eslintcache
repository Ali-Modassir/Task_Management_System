[{"D:\\Encomece-TMS\\client\\src\\index.js":"1","D:\\Encomece-TMS\\client\\src\\App.js":"2","D:\\Encomece-TMS\\client\\src\\context\\authContext.js":"3","D:\\Encomece-TMS\\client\\src\\customHooks\\auth-hook.js":"4","D:\\Encomece-TMS\\client\\src\\Authentication\\Components\\formikAuthForm.js":"5","D:\\Encomece-TMS\\client\\src\\customHooks\\http-hook.js":"6","D:\\Encomece-TMS\\client\\src\\Authentication\\Components\\ForgotPswd.js":"7","D:\\Encomece-TMS\\client\\src\\Authentication\\Components\\FormikAuthForm.js":"8","D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\Authentication.js":"9","D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\GoogleLogin.js":"10","D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\ResetPswd.js":"11","D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\ConfirmEmail.js":"12","D:\\Encomece-TMS\\client\\src\\Dashboard\\layouts\\DashLayout.js":"13","D:\\Encomece-TMS\\client\\src\\Dashboard\\routes.js":"14","D:\\Encomece-TMS\\client\\src\\Dashboard\\components\\Navbars\\Navbar.js":"15","D:\\Encomece-TMS\\client\\src\\Dashboard\\components\\Sidebar\\Sidebar.js":"16","D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Dashboard\\Dashboard.js":"17","D:\\Encomece-TMS\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\components\\sidebarStyle.js":"18","D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Workspace.js":"19","D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Components\\FormContainer.js":"20","D:\\Encomece-TMS\\client\\src\\customHooks\\task-hook.js":"21","D:\\Encomece-TMS\\client\\src\\context\\taskContext.js":"22","D:\\Encomece-TMS\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\layouts\\dashLayoutStyle.js":"23","D:\\Encomece-TMS\\client\\src\\Dashboard\\assets\\jss\\customStyle.js":"24","D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskList.js":"25","D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskData\\TaskType.js":"26","D:\\Encomece-TMS - Copy\\client\\src\\index.js":"27","D:\\Encomece-TMS - Copy\\client\\src\\App.js":"28","D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\GoogleLogin.js":"29","D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\Authentication.js":"30","D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\ResetPswd.js":"31","D:\\Encomece-TMS - Copy\\client\\src\\context\\taskContext.js":"32","D:\\Encomece-TMS - Copy\\client\\src\\context\\authContext.js":"33","D:\\Encomece-TMS - Copy\\client\\src\\customHooks\\task-hook.js":"34","D:\\Encomece-TMS - Copy\\client\\src\\customHooks\\auth-hook.js":"35","D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\ConfirmEmail.js":"36","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\layouts\\DashLayout.js":"37","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\routes.js":"38","D:\\Encomece-TMS - Copy\\client\\src\\customHooks\\http-hook.js":"39","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\components\\Navbars\\Navbar.js":"40","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\components\\Sidebar\\Sidebar.js":"41","D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Components\\ForgotPswd.js":"42","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\layouts\\dashLayoutStyle.js":"43","D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Components\\FormikAuthForm.js":"44","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Dashboard\\Dashboard.js":"45","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\components\\sidebarStyle.js":"46","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\assets\\jss\\customStyle.js":"47","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Workspace.js":"48","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\FormContainer.js":"49","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskList.js":"50","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskData\\TaskType.js":"51","D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\AdminPanel.js":"52","D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\AdminUserDetails.js":"53","D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\VE_Data\\VE_Data.js":"54","D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\AdminTaskTable.js":"55","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\VE_Workspace.js":"56","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\VE_myTasks.js":"57"},{"size":219,"mtime":1610541661297,"results":"58","hashOfConfig":"59"},{"size":2751,"mtime":1610546151370,"results":"60","hashOfConfig":"59"},{"size":226,"mtime":1610542659768,"results":"61","hashOfConfig":"59"},{"size":2418,"mtime":1610546206116,"results":"62","hashOfConfig":"59"},{"size":6901,"mtime":1609169544956,"results":"63","hashOfConfig":"59"},{"size":1417,"mtime":1609180315550,"results":"64","hashOfConfig":"59"},{"size":3597,"mtime":1609249323466,"results":"65","hashOfConfig":"59"},{"size":6966,"mtime":1610543031646,"results":"66","hashOfConfig":"59"},{"size":2223,"mtime":1609182492873,"results":"67","hashOfConfig":"59"},{"size":549,"mtime":1609250990814,"results":"68","hashOfConfig":"59"},{"size":5048,"mtime":1609244350830,"results":"69","hashOfConfig":"59"},{"size":1875,"mtime":1610543031615,"results":"70","hashOfConfig":"59"},{"size":1744,"mtime":1610538615162,"results":"71","hashOfConfig":"59"},{"size":630,"mtime":1610537405360,"results":"72","hashOfConfig":"59"},{"size":1123,"mtime":1610468269200,"results":"73","hashOfConfig":"59"},{"size":3103,"mtime":1610467886752,"results":"74","hashOfConfig":"59"},{"size":1682,"mtime":1610546335491,"results":"75","hashOfConfig":"59"},{"size":6333,"mtime":1610538908245,"results":"76","hashOfConfig":"59"},{"size":950,"mtime":1610541641710,"results":"77","hashOfConfig":"59"},{"size":4551,"mtime":1610542601339,"results":"78","hashOfConfig":"59"},{"size":460,"mtime":1610392968874,"results":"79","hashOfConfig":"59"},{"size":191,"mtime":1610393007748,"results":"80","hashOfConfig":"59"},{"size":588,"mtime":1610541519986,"results":"81","hashOfConfig":"59"},{"size":2333,"mtime":1610538902530,"results":"82","hashOfConfig":"59"},{"size":7037,"mtime":1610541400848,"results":"83","hashOfConfig":"59"},{"size":202,"mtime":1610539631703,"results":"84","hashOfConfig":"59"},{"size":219,"mtime":1610541661297,"results":"85","hashOfConfig":"86"},{"size":3435,"mtime":1611670010181,"results":"87","hashOfConfig":"86"},{"size":549,"mtime":1609250990814,"results":"88","hashOfConfig":"86"},{"size":2237,"mtime":1611475524224,"results":"89","hashOfConfig":"86"},{"size":5048,"mtime":1611217672424,"results":"90","hashOfConfig":"86"},{"size":260,"mtime":1611669825441,"results":"91","hashOfConfig":"86"},{"size":245,"mtime":1611669550630,"results":"92","hashOfConfig":"86"},{"size":1074,"mtime":1611670051573,"results":"93","hashOfConfig":"86"},{"size":2790,"mtime":1611495991021,"results":"94","hashOfConfig":"86"},{"size":1907,"mtime":1611495991021,"results":"95","hashOfConfig":"86"},{"size":1744,"mtime":1610538615162,"results":"96","hashOfConfig":"86"},{"size":630,"mtime":1610537405360,"results":"97","hashOfConfig":"86"},{"size":1417,"mtime":1609180315550,"results":"98","hashOfConfig":"86"},{"size":1123,"mtime":1610468269200,"results":"99","hashOfConfig":"86"},{"size":3103,"mtime":1610467886752,"results":"100","hashOfConfig":"86"},{"size":3597,"mtime":1609249323466,"results":"101","hashOfConfig":"86"},{"size":588,"mtime":1610541519986,"results":"102","hashOfConfig":"86"},{"size":7552,"mtime":1611495990998,"results":"103","hashOfConfig":"86"},{"size":1790,"mtime":1611495179449,"results":"104","hashOfConfig":"86"},{"size":6333,"mtime":1610538908245,"results":"105","hashOfConfig":"86"},{"size":2333,"mtime":1610538902530,"results":"106","hashOfConfig":"86"},{"size":1236,"mtime":1611822402633,"results":"107","hashOfConfig":"86"},{"size":4664,"mtime":1611771454563,"results":"108","hashOfConfig":"86"},{"size":8926,"mtime":1611765358553,"results":"109","hashOfConfig":"86"},{"size":147,"mtime":1611232590482,"results":"110","hashOfConfig":"86"},{"size":3671,"mtime":1611481363854,"results":"111","hashOfConfig":"86"},{"size":4819,"mtime":1611230200501,"results":"112","hashOfConfig":"86"},{"size":807,"mtime":1611668898153,"results":"113","hashOfConfig":"86"},{"size":4449,"mtime":1611773364420,"results":"114","hashOfConfig":"86"},{"size":1169,"mtime":1611773200885,"results":"115","hashOfConfig":"86"},{"size":8995,"mtime":1611821483498,"results":"116","hashOfConfig":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},"13fzhry",{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"119"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"119"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"119"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},"104yjqx",{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"175"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"175"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"175"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"175"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"175"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"175"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"235"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"175"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"175"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"175"},"D:\\Encomece-TMS\\client\\src\\index.js",[],["247","248"],"D:\\Encomece-TMS\\client\\src\\App.js",[],"D:\\Encomece-TMS\\client\\src\\context\\authContext.js",[],"D:\\Encomece-TMS\\client\\src\\customHooks\\auth-hook.js",[],"D:\\Encomece-TMS\\client\\src\\Authentication\\Components\\formikAuthForm.js",["249"],"D:\\Encomece-TMS\\client\\src\\customHooks\\http-hook.js",[],"D:\\Encomece-TMS\\client\\src\\Authentication\\Components\\ForgotPswd.js",[],"D:\\Encomece-TMS\\client\\src\\Authentication\\Components\\FormikAuthForm.js",[],"D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\Authentication.js",[],"D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\GoogleLogin.js",["250"],"import React, { useContext, Fragment, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../../context/authContext\";\r\n\r\n//Callback --login with google\r\nconst GoogleLogin = () => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  let { token } = useParams();\r\n  useEffect(() => {\r\n    if (token) {\r\n      auth.googleLogin(token);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>{token ? \"Email Confirmed\" : \"Token Expired\"}</h1>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default GoogleLogin;\r\n","D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\ResetPswd.js",[],"D:\\Encomece-TMS\\client\\src\\Authentication\\Pages\\ConfirmEmail.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\layouts\\DashLayout.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\routes.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\components\\Navbars\\Navbar.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\components\\Sidebar\\Sidebar.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Dashboard\\Dashboard.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\components\\sidebarStyle.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Workspace.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Components\\FormContainer.js",["251"],"import React, { useContext } from \"react\";\r\n\r\n//Material-ui core componets\r\nimport { Button, LinearProgress, Box } from \"@material-ui/core\";\r\n\r\n//Formik Components\r\nimport { Formik, Form, Field } from \"formik\"; //Using Formik\r\nimport { Autocomplete } from \"formik-material-ui-lab\";\r\nimport * as Yup from \"yup\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport MuiTextField from \"@material-ui/core/TextField\";\r\n\r\nimport { TaskType } from \"./TaskData/TaskType\";\r\nimport { useHttpClient } from \"../../../../customHooks/http-hook\";\r\nimport { AuthContext } from \"../../../../context/authContext\";\r\nimport { TaskContext } from \"../../../../context/taskContext\";\r\n\r\n//styles\r\nimport \"./styles/FormContainer.css\";\r\n\r\nconst FormContainer = () => {\r\n  //custom-hook for all http work\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n\r\n  //context\r\n  const auth = useContext(AuthContext);\r\n  const taskContext = useContext(TaskContext);\r\n\r\n  //form initial-values\r\n  const initialValues = {\r\n    taskName: \"\",\r\n    taskType: \"none\",\r\n    taskDescription: \"\",\r\n    dueDate: new Date(),\r\n  };\r\n\r\n  //Vaidation the input\r\n  const validationSchema = Yup.object().shape({\r\n    taskName: Yup.string().required(\"Add a task\"),\r\n  });\r\n\r\n  //Submitting the form\r\n  const onSubmit = (values, { setSubmitting }) => {\r\n    setTimeout(async () => {\r\n      setSubmitting(false);\r\n      const formData = JSON.stringify(values, null, 2);\r\n      var data = JSON.parse(formData);\r\n      var id = uuidv4();\r\n      var extraData = {\r\n        userId: auth.userId,\r\n        taskId: id,\r\n      };\r\n      data = { ...data, ...extraData };\r\n      data = JSON.stringify(data);\r\n      console.log(data);\r\n      try {\r\n        const response = await sendRequest(\r\n          \"http://localhost:8000/api\" + \"/dashboard/workspace/task\",\r\n          \"POST\",\r\n          data,\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        console.log(response);\r\n        if (response.ok) {\r\n          taskContext.setAllTasksHandler(response.task);\r\n          console.log(response.message);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      {({ submitForm, isSubmitting, touched, errors }) => (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <Form>\r\n            <div className=\"formContainer\">\r\n              <Box margin={2}>\r\n                <Field\r\n                  component={TextField}\r\n                  name=\"taskName\"\r\n                  type=\"text\"\r\n                  label=\"Task Heading\"\r\n                  style={{ width: \"400px\" }}\r\n                  variant=\"outlined\"\r\n                />\r\n              </Box>\r\n              <Box margin={2}>\r\n                <Field\r\n                  component={Autocomplete}\r\n                  name=\"taskType\"\r\n                  options={TaskType}\r\n                  getOptionLabel={(option) => option.title || \"none\"}\r\n                  style={{ width: \"300px\" }}\r\n                  renderInput={(params) => (\r\n                    <MuiTextField\r\n                      {...params}\r\n                      helperText={touched[\"taskType\"] && errors[\"taskType\"]}\r\n                      label=\"Task Type\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Box>\r\n              <Box margin={2}>\r\n                <Field\r\n                  component={TextField}\r\n                  name=\"taskDescription\"\r\n                  type=\"textarea\"\r\n                  row=\"5\"\r\n                  fullWidth\r\n                  label=\"Task Description\"\r\n                  variant=\"outlined\"\r\n                />\r\n              </Box>\r\n              <Box margin={2}>\r\n                {isLoading && <LinearProgress />}\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                  onClick={submitForm}\r\n                  style={{ margin: \"5px 0 0 0\" }}\r\n                >\r\n                  Add Task\r\n                </Button>\r\n              </Box>\r\n            </div>\r\n          </Form>\r\n        </MuiPickersUtilsProvider>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n","D:\\Encomece-TMS\\client\\src\\customHooks\\task-hook.js",[],"D:\\Encomece-TMS\\client\\src\\context\\taskContext.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\layouts\\dashLayoutStyle.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\assets\\jss\\customStyle.js",[],"D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskList.js",["252"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { Formik, Form, Field } from \"formik\"; //Using Formik\r\nimport { TextField } from \"formik-material-ui\";\r\n\r\n//Material-ui-core components\r\nimport {\r\n  CircularProgress,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Button,\r\n  Box,\r\n  LinearProgress,\r\n} from \"@material-ui/core\";\r\n//Icons\r\nimport AssignmentOutlinedIcon from \"@material-ui/icons/AssignmentOutlined\";\r\nimport DetailsIcon from \"@material-ui/icons/Details\";\r\n\r\n//Context\r\nimport { AuthContext } from \"../../../../context/authContext\";\r\nimport { TaskContext } from \"../../../../context/taskContext\";\r\n\r\n//Custom Hooks\r\nimport { useHttpClient } from \"../../../../customHooks/http-hook\";\r\n\r\nconst TaskList = () => {\r\n  //Using context for state update\r\n  const auth = useContext(AuthContext);\r\n  const taskContext = useContext(TaskContext);\r\n\r\n  //Storing-List-of-Tasks\r\n  const [taskList, setTasksList] = useState([]);\r\n\r\n  //Custom hook for all http work\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n\r\n  //State used for adding comment section\r\n  const [detailsShow, setDetailsShow] = useState(false);\r\n  const [clickedTaskId, setClickedTaskId] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(null);\r\n\r\n  //Fetching all tasks from mongodb using a custom-hook\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    sendRequest(\r\n      \"http://localhost:8000/api/dashboard/workspace/allTasks/\" + auth.userId\r\n    )\r\n      .then((response) => {\r\n        if (mounted) {\r\n          setTasksList(response);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n    return () => (mounted = false);\r\n  }, [taskContext.allTasks, taskContext.allComments]);\r\n\r\n  //Toogle Comment-Section\r\n  const toggleDrawer = (id, index) => {\r\n    setDetailsShow(!detailsShow);\r\n    setClickedTaskId(id);\r\n    setCurrentIndex(index);\r\n  };\r\n\r\n  //Converting Date-String to human readable\r\n  const dateHandler = (dateString) => {\r\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  //Post request to mongodb for storing comments\r\n  const onSubmit = (values, { setSubmitting }) => {\r\n    setTimeout(() => {\r\n      setSubmitting(false);\r\n      const formData = JSON.stringify(values, null, 2);\r\n      var data = JSON.parse(formData);\r\n      data = { ...data, taskId: clickedTaskId, userId: auth.userId };\r\n      data = JSON.stringify(data);\r\n      sendRequest(\r\n        \"http://localhost:8000/api/dashboard/workspace/task/comments\",\r\n        \"POST\",\r\n        data,\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      )\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            taskContext.commentsHandler(response.comment);\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <CircularProgress />}\r\n      {taskList.length === 0 ? (\r\n        <Typography>No Task Assigned</Typography>\r\n      ) : (\r\n        <div className=\"TaskList\">\r\n          {taskList.map((task, index) => {\r\n            return (\r\n              <div className=\"taskItem\">\r\n                <List component=\"nav\">\r\n                  <ListItem key={index}>\r\n                    <ListItemIcon\r\n                      onClick={() => toggleDrawer(task.taskId, index)}\r\n                    >\r\n                      <AssignmentOutlinedIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText style={{ marginRight: \"30px\" }}>\r\n                      {task.taskName}\r\n                    </ListItemText>\r\n                    <ListItemText style={{ marginRight: \"30px\" }}>\r\n                      {task.taskType.title}\r\n                    </ListItemText>\r\n                    <ListItemText style={{ marginRight: \"30px\" }}>\r\n                      {dateHandler(task.dueDate)}\r\n                    </ListItemText>\r\n                    <ListItemIcon\r\n                      // style={{ : \"30px\" }}\r\n                      onClick={() => toggleDrawer(task.taskId, index)}\r\n                    >\r\n                      Details <DetailsIcon />\r\n                    </ListItemIcon>\r\n                  </ListItem>\r\n\r\n                  {detailsShow && currentIndex === index && (\r\n                    <div className=\"taskDetails\">\r\n                      <Box margin={1}>\r\n                        <div className=\"details\">\r\n                          <Typography>\r\n                            Description : {task.taskDescription}\r\n                          </Typography>\r\n                        </div>\r\n                      </Box>\r\n                      <List component=\"nav\">\r\n                        {task.taskComments.map((comment, index) => {\r\n                          return (\r\n                            <ListItem key={index}>\r\n                              <ListItemText>{comment.person}</ListItemText>\r\n                              <ListItemText>{comment.comment}</ListItemText>\r\n                              <ListItemText>\r\n                                {dateHandler(comment.time)}\r\n                              </ListItemText>\r\n                            </ListItem>\r\n                          );\r\n                        })}\r\n                      </List>\r\n                      <Formik\r\n                        initialValues={{ comment: \"\" }}\r\n                        onSubmit={onSubmit}\r\n                      >\r\n                        {({ submitForm, isSubmitting }) => (\r\n                          <Form>\r\n                            <div className=\"formContainer\">\r\n                              <Box margin={1}>\r\n                                <Field\r\n                                  component={TextField}\r\n                                  name=\"comment\"\r\n                                  type=\"text\"\r\n                                  fullWidth\r\n                                  label=\"Add a comment\"\r\n                                />\r\n                              </Box>\r\n                              <Box margin={1}>\r\n                                {isLoading && <LinearProgress />}\r\n                                <Button\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                  disabled={isSubmitting}\r\n                                  onClick={submitForm}\r\n                                  style={{ margin: \"10px 0 0 0\" }}\r\n                                >\r\n                                  Comment\r\n                                </Button>\r\n                              </Box>\r\n                            </div>\r\n                          </Form>\r\n                        )}\r\n                      </Formik>\r\n                    </div>\r\n                  )}\r\n                </List>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","D:\\Encomece-TMS\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskData\\TaskType.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\index.js",[],["253","254"],"D:\\Encomece-TMS - Copy\\client\\src\\App.js",["255","256"],"import React, { Fragment } from \"react\";\n\n//Router\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport Notifications from \"react-notify-toast\"; //For pop-up notification\n\n//Contexts\nimport { AuthContext } from \"./context/authContext\";\nimport { TaskContext } from \"./context/taskContext\";\n\n//hooks\nimport { useAuth } from \"./customHooks/auth-hook\";\nimport { useTaskHook } from \"./customHooks/task-hook\";\n\n//Pages\n//Authentication\nimport Authentication from \"./Authentication/Pages/Authentication\";\nimport GoogleLogin from \"./Authentication/Pages/GoogleLogin\";\nimport ConfirmEmail from \"./Authentication/Pages/ConfirmEmail\";\nimport ResetPswd from \"./Authentication/Pages/ResetPswd\";\n\n//Dashboard\nimport DashLayout from \"./Dashboard/layouts/DashLayout\";\nimport VE_Workspace from \"./Dashboard/views/Workspace/VE_Workspace\";\n\n//AdminPanel\nimport AdminPanel from \"./AdminPanel/AdminPanel\";\nimport AdminTaskTable from \"./AdminPanel/AdminTaskTable\";\n\nconst App = () => {\n  //Context\n  const {\n    token,\n    login,\n    logout,\n    userId,\n    userType,\n    userName,\n    userEmail,\n    googleLogin,\n  } = useAuth();\n  const {\n    allTasks,\n    setAllTasksHandler,\n    allComments,\n    commentsHandler,\n    allUsers,\n    setAllUsersHandler,\n    VE_details,\n  } = useTaskHook();\n\n  //Checks if user as token then it will render particular routes\n\n  let routes;\n  if (token) {\n    routes = (\n      <Router>\n        <Switch>\n          <Route path=\"/VE/dash/:id\">\n            <VE_Workspace />\n          </Route>\n          <Route path=\"/dash\">\n            <DashLayout />\n          </Route>\n          <Route path=\"/admin/:userId\" exact>\n            <AdminTaskTable />\n          </Route>\n          <Route path=\"/admin\" exact>\n            <AdminPanel />\n          </Route>\n          <Redirect to=\"/dash\" />\n        </Switch>\n      </Router>\n    );\n  } else {\n    routes = (\n      <Router>\n        <Switch>\n          <Route path=\"/auth\" exact>\n            <Authentication />\n          </Route>\n          <Route path=\"/auth/reset/:resetToken\" exact>\n            <ResetPswd />\n          </Route>\n          <Route path=\"/auth/:token\" exact>\n            <GoogleLogin />\n          </Route>\n          <Route path=\"/auth/confirm/:id\" exact>\n            <ConfirmEmail />\n          </Route>\n          <Route path=\"/admin\" exact>\n            <AdminPanel />\n          </Route>\n          <Route path=\"/VE/dash/:id\">\n            <VE_Workspace />\n          </Route>\n          <Route path=\"/admin/:userId\" exact>\n            <AdminTaskTable />\n          </Route>\n          <Redirect to=\"/auth\" exact />\n        </Switch>\n      </Router>\n    );\n  }\n\n  return (\n    <Fragment>\n      <Notifications />\n      <AuthContext.Provider\n        value={{\n          isLoggedIn: !!token,\n          token: token,\n          userName: userName,\n          userEmail: userEmail,\n          userId: userId,\n          userType: userType,\n          logout: logout,\n          login: login,\n          googleLogin: googleLogin,\n        }}\n      >\n        <TaskContext.Provider\n          value={{\n            allTasks,\n            allComments,\n            setAllTasksHandler,\n            commentsHandler,\n            allUsers,\n            VE_details,\n            setAllUsersHandler,\n          }}\n        >\n          <main>{routes}</main>\n        </TaskContext.Provider>\n      </AuthContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default App;\n","D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\GoogleLogin.js",["257"],"D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\Authentication.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\ResetPswd.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\context\\taskContext.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\context\\authContext.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\customHooks\\task-hook.js",["258"],"import { useState, useCallback, useEffect } from \"react\";\r\nimport { useHttpClient } from \"../customHooks/http-hook\";\r\n\r\nexport const useTaskHook = () => {\r\n  //custom hook for http reqs\r\n  const { sendRequest } = useHttpClient();\r\n  //states\r\n  const [allTasks, setAllTasks] = useState([]);\r\n  const [allComments, setAllComments] = useState([]);\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [VE_details, setVE_details] = useState([]);\r\n\r\n  useEffect(() => {\r\n    sendRequest(process.env.REACT_APP_BASE_URL + \"/dashboard/workspace/VE/data\")\r\n      .then((res) => setVE_details(res))\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  const setAllTasksHandler = useCallback((tasks) => {\r\n    setAllTasks(tasks);\r\n  }, []);\r\n\r\n  const commentsHandler = useCallback((comment) => {\r\n    setAllComments(comment);\r\n  }, []);\r\n\r\n  const setAllUsersHandler = (user) => {\r\n    setAllUsers(user);\r\n  };\r\n\r\n  return {\r\n    allTasks,\r\n    setAllTasksHandler,\r\n    allComments,\r\n    commentsHandler,\r\n    allUsers,\r\n    VE_details,\r\n    setAllUsersHandler,\r\n  };\r\n};\r\n","D:\\Encomece-TMS - Copy\\client\\src\\customHooks\\auth-hook.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Pages\\ConfirmEmail.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\layouts\\DashLayout.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\routes.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\customHooks\\http-hook.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\components\\Navbars\\Navbar.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\components\\Sidebar\\Sidebar.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Components\\ForgotPswd.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\layouts\\dashLayoutStyle.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Authentication\\Components\\FormikAuthForm.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Dashboard\\Dashboard.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\assets\\jss\\material-dashboard-react\\components\\sidebarStyle.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\assets\\jss\\customStyle.js",[],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Workspace.js",["259"],"D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\FormContainer.js",["260"],"import React, { useContext } from \"react\";\r\n\r\n//Material-ui core componets\r\nimport { Button, LinearProgress, Box } from \"@material-ui/core\";\r\nimport { DatePicker } from \"formik-material-ui-pickers\";\r\n\r\n//Formik Components\r\nimport { Formik, Form, Field } from \"formik\"; //Using Formik\r\nimport { Autocomplete } from \"formik-material-ui-lab\";\r\nimport * as Yup from \"yup\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport MuiTextField from \"@material-ui/core/TextField\";\r\n\r\nimport { TaskType } from \"./TaskData/TaskType\";\r\nimport { useHttpClient } from \"../../../../customHooks/http-hook\";\r\nimport { AuthContext } from \"../../../../context/authContext\";\r\nimport { TaskContext } from \"../../../../context/taskContext\";\r\n\r\n//styles\r\nimport \"./styles/FormContainer.css\";\r\n\r\nconst FormContainer = () => {\r\n  //custom-hook for all http work\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n\r\n  //context\r\n  const auth = useContext(AuthContext);\r\n  const taskContext = useContext(TaskContext);\r\n\r\n  //form initial-values\r\n  const initialValues = {\r\n    taskName: \"\",\r\n    taskType: \"none\",\r\n    taskDescription: \"\",\r\n    dueDate: new Date(),\r\n  };\r\n\r\n  //Vaidation the input\r\n  const validationSchema = Yup.object().shape({\r\n    taskName: Yup.string().required(\"Add a task\"),\r\n  });\r\n\r\n  //Submitting the form\r\n  const onSubmit = (values, { setSubmitting, resetForm }) => {\r\n    setTimeout(async () => {\r\n      setSubmitting(false);\r\n      const formData = JSON.stringify(values, null, 2);\r\n      var data = JSON.parse(formData);\r\n      var id = uuidv4();\r\n      console.log(auth.userName);\r\n      var extraData = {\r\n        userId: auth.userId,\r\n        userName: auth.userName,\r\n        userEmail: auth.userEmail,\r\n        taskId: id,\r\n      };\r\n      data = { ...data, ...extraData };\r\n      data = JSON.stringify(data);\r\n      console.log(data);\r\n      try {\r\n        const response = await sendRequest(\r\n          \"http://localhost:8000/api\" + \"/dashboard/workspace/task\",\r\n          \"POST\",\r\n          data,\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        console.log(response);\r\n        if (response.ok) {\r\n          taskContext.setAllTasksHandler(response.task);\r\n          console.log(response.message);\r\n          resetForm({ values: \"\" });\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      {({ submitForm, isSubmitting, touched, errors }) => (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <Form>\r\n            <div className=\"formContainer\">\r\n              <Box margin={3}>\r\n                <Field\r\n                  component={TextField}\r\n                  name=\"taskName\"\r\n                  type=\"text\"\r\n                  label=\"Task Heading\"\r\n                  style={{ width: \"400px\" }}\r\n                />\r\n              </Box>\r\n              <Box margin={3}>\r\n                <Field\r\n                  component={Autocomplete}\r\n                  name=\"taskType\"\r\n                  options={TaskType}\r\n                  renderInput={(params) => (\r\n                    <MuiTextField\r\n                      {...params}\r\n                      helperText={touched[\"taskType\"] && errors[\"taskType\"]}\r\n                      label=\"Task Type\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Box>\r\n              <Box margin={3}>\r\n                <Field\r\n                  component={TextField}\r\n                  name=\"taskDescription\"\r\n                  type=\"textarea\"\r\n                  row=\"5\"\r\n                  fullWidth\r\n                  label=\"Task Description\"\r\n                />\r\n              </Box>\r\n              <Box margin={3}>\r\n                <Field component={DatePicker} name=\"dueDate\" label=\"Due Date\" />\r\n              </Box>\r\n              <Box margin={3}>\r\n                {isLoading && <LinearProgress />}\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                  onClick={submitForm}\r\n                  style={{ margin: \"5px 0 0 0\" }}\r\n                >\r\n                  Add Task\r\n                </Button>\r\n              </Box>\r\n            </div>\r\n          </Form>\r\n        </MuiPickersUtilsProvider>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskList.js",["261","262","263","264","265"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { Formik, Form, Field } from \"formik\"; //Using Formik\r\nimport { TextField } from \"formik-material-ui\";\r\n\r\n//Material-ui-core components\r\nimport {\r\n  LinearProgress,\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Button,\r\n  withStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport MuiAccordion from \"@material-ui/core/Accordion\";\r\nimport MuiAccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport MuiAccordionDetails from \"@material-ui/core/AccordionDetails\";\r\n//Icons\r\nimport AssignmentOutlinedIcon from \"@material-ui/icons/AssignmentOutlined\";\r\nimport DetailsIcon from \"@material-ui/icons/Details\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\n\r\n//Context\r\nimport { AuthContext } from \"../../../../context/authContext\";\r\nimport { TaskContext } from \"../../../../context/taskContext\";\r\n\r\n//Custom Hooks\r\nimport { useHttpClient } from \"../../../../customHooks/http-hook\";\r\n\r\nconst Accordion = withStyles({\r\n  root: {\r\n    border: \"1px solid rgba(0, 0, 0, .125)\",\r\n    boxShadow: \"none\",\r\n    \"&:not(:last-child)\": {\r\n      borderBottom: 0,\r\n    },\r\n    \"&:before\": {\r\n      display: \"none\",\r\n    },\r\n    \"&$expanded\": {\r\n      margin: \"auto\",\r\n    },\r\n  },\r\n  expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n  root: {\r\n    backgroundColor: \"rgba(0, 0, 0, .03)\",\r\n    borderBottom: \"1px solid rgba(0, 0, 0, .125)\",\r\n    marginBottom: -1,\r\n    minHeight: 56,\r\n    \"&$expanded\": {\r\n      minHeight: 56,\r\n    },\r\n  },\r\n  content: {\r\n    \"&$expanded\": {\r\n      margin: \"12px 0\",\r\n    },\r\n  },\r\n  expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst AccordionDetails = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiAccordionDetails);\r\n\r\nconst TaskList = () => {\r\n  //Using context for state update\r\n  const auth = useContext(AuthContext);\r\n  const taskContext = useContext(TaskContext);\r\n\r\n  //States\r\n  const [taskList, setTasksList] = useState([]);\r\n  const [expanded, setExpanded] = useState(\"\");\r\n\r\n  //Custom hook for all http work\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n\r\n  const handleChange = (panel) => (event, newExpanded) => {\r\n    setExpanded(newExpanded ? panel : false);\r\n  };\r\n\r\n  //Fetching all tasks from mongodb using a custom-hook\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    sendRequest(\r\n      process.env.REACT_APP_BASE_URL +\r\n        \"/dashboard/workspace/allTasks/\" +\r\n        auth.userId\r\n    )\r\n      .then((response) => {\r\n        if (mounted) {\r\n          setTasksList(response);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n    return () => (mounted = false);\r\n  }, [taskContext.allTasks, taskContext.allComments]);\r\n\r\n  //Converting Date-String to human readable\r\n  const dateHandler = (dateString) => {\r\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  //Post request to mongodb for storing comments\r\n  const onSubmit = (assigned_VE_Id) => (values, { setSubmitting }) => {\r\n    setTimeout(() => {\r\n      setSubmitting(false);\r\n      const formData = JSON.stringify(values, null, 2);\r\n      var data = JSON.parse(formData);\r\n      data = {\r\n        ...data,\r\n        taskId: assigned_VE_Id,\r\n        userId: auth.userId,\r\n        assigned_VE_Id: assigned_VE_Id,\r\n        person: auth.userName,\r\n        type: \"client\",\r\n      };\r\n      data = JSON.stringify(data);\r\n      sendRequest(\r\n        \"http://localhost:8000/api/dashboard/workspace/task/comments\",\r\n        \"POST\",\r\n        data,\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      )\r\n        .then((response) => taskContext.commentsHandler(response.comments))\r\n        .catch((err) => console.log(err));\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {taskList.map &&\r\n        taskList.map((task, index) => {\r\n          return (\r\n            <Accordion\r\n              square\r\n              expanded={expanded === index}\r\n              onChange={handleChange(index)}\r\n            >\r\n              <AccordionSummary>\r\n                <Typography>{task.taskType}</Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                  <TableContainer component={Paper}>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Task Name</TableCell>\r\n                          <TableCell align=\"center\">Task Description</TableCell>\r\n                          <TableCell align=\"center\">Due Date</TableCell>\r\n                          <TableCell align=\"center\">Assigned To</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        <TableRow key={task.taskId}>\r\n                          <TableCell component=\"th\" scope=\"row\">\r\n                            {task.taskName}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {task.taskDescription}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {dateHandler(task.dueDate)}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {task.assigned_VE_Email\r\n                              ? task.assigned_VE_Email\r\n                              : \"Not Assigned\"}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <Box margin={2}>\r\n                    <Typography variant=\"h6\" color=\"secondary\">\r\n                      Start Conversation\r\n                    </Typography>\r\n                  </Box>\r\n                  {task.taskComments.length != 0 && (\r\n                    <>\r\n                      <TableContainer component={Paper}>\r\n                        <Table>\r\n                          <TableHead>\r\n                            <TableRow>\r\n                              <TableCell>User</TableCell>\r\n                              <TableCell align=\"center\">Comment</TableCell>\r\n                              <TableCell align=\"center\">Time</TableCell>\r\n                            </TableRow>\r\n                          </TableHead>\r\n                          <TableBody>\r\n                            {task.taskComments.map((row) => (\r\n                              <TableRow key={row._id}>\r\n                                <TableCell>{row.person}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                  {row.comment}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                  {dateHandler(row.time)}\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </>\r\n                  )}\r\n                  <Formik\r\n                    initialValues={{ comment: \"\" }}\r\n                    onSubmit={onSubmit(task.taskId, task.assigned_VE_Id)}\r\n                  >\r\n                    {({ submitForm, isSubmitting }) => (\r\n                      <Form>\r\n                        <div className=\"formContainer\">\r\n                          <Box margin={1}>\r\n                            <Field\r\n                              component={TextField}\r\n                              name=\"comment\"\r\n                              type=\"text\"\r\n                              fullWidth\r\n                              label=\"Add a comment\"\r\n                            />\r\n                          </Box>\r\n                          {isLoading && <LinearProgress color=\"secondary\" />}\r\n                          <Box margin={1}>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              disabled={isSubmitting}\r\n                              onClick={submitForm}\r\n                              style={{ margin: \"10px 0 0 0\" }}\r\n                            >\r\n                              Comment\r\n                            </Button>\r\n                          </Box>\r\n                        </div>\r\n                      </Form>\r\n                    )}\r\n                  </Formik>\r\n                </div>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\TaskData\\TaskType.js",[],["266","267"],"D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\AdminPanel.js",["268","269","270","271"],"import React, { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  withStyles,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { TaskContext } from \"../context/taskContext\";\r\n\r\nconst AdminPanel = () => {\r\n  const { allUsers, setAllUsersHandler } = useContext(TaskContext);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const cb = async () => {\r\n      const response = await fetch(\r\n        process.env.REACT_APP_BASE_URL + \"/dashboard/workspace/allUsers\"\r\n      );\r\n      const json = await response.json();\r\n      setAllUsersHandler(json);\r\n    };\r\n    cb();\r\n  }, []);\r\n\r\n  const detailsHandler = (id) => {\r\n    history.push(\"/admin/\" + id);\r\n  };\r\n\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 18,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 500,\r\n    },\r\n    tableHeader: {\r\n      fontSize: \"30px\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Admin Panel\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <br />\r\n      <br />\r\n      <TableContainer>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <StyledTableRow>\r\n              <StyledTableCell>\r\n                <Typography>Sl.No</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>User Name</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>User Email</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Total Active Task</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Details</Typography>\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {allUsers.map((user, index) => (\r\n              <StyledTableRow key={user.userId}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {index + 1}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {user.userName}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {user.userEmail}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {user.tasks.length}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  <div\r\n                    onClick={() => detailsHandler(user.userId)}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  >\r\n                    Click to get Details\r\n                  </div>\r\n                </StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminPanel;\r\n","D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\AdminUserDetails.js",["272","273"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  withStyles,\r\n  makeStyles,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport { useHttpClient } from \"../customHooks/http-hook\";\r\nimport { VE_Data } from \"./VE_Data/VE_Data\";\r\n\r\nconst AdminUserDetails = () => {\r\n  const { userId } = useParams();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [assignedValue, setAssignedValue] = useState(null);\r\n  const [userName, setUserName] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const cb = async () => {\r\n      const response = await fetch(\r\n        process.env.REACT_APP_BASE_URL +\r\n          \"/dashboard/workspace/allUsers/\" +\r\n          userId\r\n      );\r\n      const json = await response.json();\r\n      setTasks(json.tasks);\r\n      setUserName(json.userName);\r\n    };\r\n    cb();\r\n  }, []);\r\n\r\n  useEffect(() => {}, [assignedValue]);\r\n\r\n  //Converting Date-String to human readable\r\n  const dateHandler = (dateString) => {\r\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 18,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 500,\r\n    },\r\n    tableHeader: {\r\n      fontSize: \"30px\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {userName}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <br />\r\n      <br />\r\n      <TableContainer>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <StyledTableRow>\r\n              <StyledTableCell>\r\n                <Typography>Sl.No</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Task Name</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Task Type</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Due Date</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Task Description</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Status</Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                <Typography>Assign</Typography>\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {tasks.map((task, index) => (\r\n              <StyledTableRow key={task.taskId}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {index + 1}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {task.taskName}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {task.taskType.title}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {dateHandler(task.dueDate)}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {task.taskDescription}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  {task.status ? \"Done\" : \"Pending\"}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">Assign</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Autocomplete\r\n        id=\"controlled-demo\"\r\n        value={assignedValue}\r\n        options={VE_Data}\r\n        getOptionLabel={(option) => option.name}\r\n        onChange={(event, newValue) => {\r\n          setAssignedValue(newValue);\r\n        }}\r\n        style={{ width: 300, marginTop: \"20px\" }}\r\n        renderInput={(params) => <TextField {...params} label=\"Assign To\" />}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminUserDetails;\r\n",["274","275"],"D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\VE_Data\\VE_Data.js",["276","277","278"],"D:\\Encomece-TMS - Copy\\client\\src\\AdminPanel\\AdminTaskTable.js",["279","280"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { notify } from \"react-notify-toast\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  LinearProgress,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\n// import { VE_Data } from \"./VE_Data/VE_Data\";\r\nimport { useHttpClient } from \"../customHooks/http-hook\";\r\nimport { TaskContext } from \"../context/taskContext\";\r\n\r\nconst AdminTaskTable = () => {\r\n  const { userId } = useParams();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [assignedValue, setAssignedValue] = useState(null);\r\n  const [userName, setUserName] = useState();\r\n  const [userEmail, setUserEmail] = useState();\r\n  const [select, setSelection] = useState([]);\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n\r\n  const { VE_details } = useContext(TaskContext);\r\n\r\n  useEffect(() => {\r\n    const cb = async () => {\r\n      const response = await fetch(\r\n        process.env.REACT_APP_BASE_URL +\r\n          \"/dashboard/workspace/allUsers/\" +\r\n          userId\r\n      );\r\n      const json = await response.json();\r\n      if (json) {\r\n        json.tasks.map &&\r\n          json.tasks.map((task) => {\r\n            return (task.dueDate = dateHandler(task.dueDate));\r\n          });\r\n        setTasks(json.tasks);\r\n        setUserName(json.userName);\r\n        setUserEmail(json.userEmail);\r\n      }\r\n    };\r\n    cb();\r\n  }, []);\r\n\r\n  const sendTaskDetails = async () => {\r\n    const getTaskDetails = tasks.filter((task) => {\r\n      return select.rowIds[0] == task.id;\r\n    });\r\n    const data = {\r\n      ...assignedValue,\r\n      ...getTaskDetails[0],\r\n      assignUserId: userId,\r\n      assignUserName: userName,\r\n      assignUserEmail: userEmail,\r\n    };\r\n    console.log(data);\r\n    try {\r\n      const response = await sendRequest(\r\n        process.env.REACT_APP_BASE_URL + \"/dashboard/workspace/sendTask\",\r\n        \"POST\",\r\n        JSON.stringify(data),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      );\r\n      notify.show(response.message, \"success\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  //Converting Date-String to human readable\r\n  const dateHandler = (dateString) => {\r\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"id\", headerName: \"Sl.No\", width: 100 },\r\n    { field: \"taskName\", headerName: \"Task Name\", width: 330 },\r\n    { field: \"taskType\", headerName: \"Task Type\", width: 330 },\r\n    { field: \"taskDescription\", headerName: \"Task Description\", width: 350 },\r\n    {\r\n      field: \"dueDate\",\r\n      headerName: \"Due Date\",\r\n      width: 330,\r\n    },\r\n    { field: \"assigned_VE_Name\", headerName: \"Assigned To\", width: 300 },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">{userName}</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <br />\r\n      <br />\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={tasks}\r\n          columns={columns}\r\n          pageSize={5}\r\n          checkboxSelection\r\n          hideFooterPagination\r\n          onSelectionChange={(newSelection) => {\r\n            setSelection(newSelection);\r\n          }}\r\n        />\r\n      </div>\r\n      <div style={{ marginTop: \"30px\" }}>\r\n        <Box margin={2}>\r\n          <Autocomplete\r\n            id=\"controlled-demo\"\r\n            value={assignedValue}\r\n            options={VE_details}\r\n            getOptionLabel={(option) => option.name}\r\n            onChange={(event, newValue) => {\r\n              setAssignedValue(newValue);\r\n            }}\r\n            style={{ width: 400, marginTop: \"20px\" }}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Assign To\" />\r\n            )}\r\n          />\r\n        </Box>\r\n        {isLoading && <LinearProgress style={{ width: 400 }} />}\r\n        <Box margin={2}>\r\n          <Button\r\n            color=\"secondary\"\r\n            style={{ marginTop: \"10px\" }}\r\n            onClick={sendTaskDetails}\r\n            variant=\"outlined\"\r\n          >\r\n            Assign\r\n          </Button>\r\n        </Box>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminTaskTable;\r\n","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\VE_Workspace.js",["281","282","283","284"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useHttpClient } from \"../../../customHooks/http-hook\";\r\nimport { AuthContext } from \"../../../context/authContext\";\r\nimport { notify } from \"react-notify-toast\";\r\n\r\nconst VE_Workspace = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n  const { id } = useParams();\r\n  const ids = id.split(\"=\");\r\n  const [taskData, setTaskData] = useState({\r\n    assignUserId: ids[0],\r\n    assignTaskId: ids[1],\r\n    userId: ids[2],\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    sendRequest(\r\n      process.env.REACT_APP_BASE_URL + \"/dashboard/workspace/VE/addTask\",\r\n      \"POST\",\r\n      JSON.stringify(taskData),\r\n      {\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    )\r\n      .then((res) => {\r\n        notify.show(res.message, \"success\");\r\n        if (res.message) {\r\n          history.push(\"/dash\");\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, [taskData]);\r\n\r\n  return <div>VE Workspace</div>;\r\n};\r\n\r\nexport default VE_Workspace;\r\n","D:\\Encomece-TMS - Copy\\client\\src\\Dashboard\\views\\Workspace\\Components\\VE_myTasks.js",["285","286"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { AuthContext } from \"../../../../context/authContext\";\r\nimport { useHttpClient } from \"../../../../customHooks/http-hook\";\r\nimport { Formik, Form, Field } from \"formik\"; //Using Formik\r\nimport { TextField } from \"formik-material-ui\";\r\nimport {\r\n  LinearProgress,\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Button,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiAccordion from \"@material-ui/core/Accordion\";\r\nimport MuiAccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport MuiAccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { TaskContext } from \"../../../../context/taskContext\";\r\n\r\nconst Accordion = withStyles({\r\n  root: {\r\n    border: \"1px solid rgba(0, 0, 0, .125)\",\r\n    boxShadow: \"none\",\r\n    \"&:not(:last-child)\": {\r\n      borderBottom: 0,\r\n    },\r\n    \"&:before\": {\r\n      display: \"none\",\r\n    },\r\n    \"&$expanded\": {\r\n      margin: \"auto\",\r\n    },\r\n  },\r\n  expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n  root: {\r\n    backgroundColor: \"rgba(0, 0, 0, .03)\",\r\n    borderBottom: \"1px solid rgba(0, 0, 0, .125)\",\r\n    marginBottom: -1,\r\n    minHeight: 56,\r\n    \"&$expanded\": {\r\n      minHeight: 56,\r\n    },\r\n  },\r\n  content: {\r\n    \"&$expanded\": {\r\n      margin: \"12px 0\",\r\n    },\r\n  },\r\n  expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst AccordionDetails = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiAccordionDetails);\r\n\r\nconst VE_myTasks = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { sendRequest, isLoading } = useHttpClient();\r\n  const [taskList, setTaskList] = useState([]);\r\n  const [expanded, setExpanded] = useState(\"\");\r\n  const taskContext = useContext(TaskContext);\r\n\r\n  const handleChange = (panel) => (event, newExpanded) => {\r\n    setExpanded(newExpanded ? panel : false);\r\n  };\r\n\r\n  //Getting all tasks\r\n  useEffect(() => {\r\n    sendRequest(\r\n      process.env.REACT_APP_BASE_URL +\r\n        \"/dashboard/workspace/VE/task/\" +\r\n        auth.userId\r\n    )\r\n      .then((res) => setTaskList(res))\r\n      .catch((err) => console.log(err));\r\n  }, [taskContext.allTasks, taskContext.allComments]);\r\n\r\n  //Submitting comment form\r\n  const onSubmit = (taskId, assignUserId) => (values, { setSubmitting }) => {\r\n    setTimeout(() => {\r\n      setSubmitting(false);\r\n      const formData = JSON.stringify(values, null, 2);\r\n      var data = JSON.parse(formData);\r\n      data = {\r\n        ...data,\r\n        userId: auth.userId,\r\n        person: auth.userName,\r\n        taskId: taskId,\r\n        assignUserId: assignUserId,\r\n        type: \"ve\",\r\n      };\r\n      data = JSON.stringify(data);\r\n      console.log(data);\r\n      sendRequest(\r\n        \"http://localhost:8000/api/dashboard/workspace/task/comments\",\r\n        \"POST\",\r\n        data,\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      )\r\n        .then((response) => taskContext.commentsHandler(response.comments))\r\n        .catch((err) => console.log(err));\r\n    }, 500);\r\n  };\r\n\r\n  //Converting Date-String to human readable\r\n  const dateHandler = (dateString) => {\r\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  if (taskList.ok === false) {\r\n    return <Typography variant=\"h6\">No Task Assigned</Typography>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        {taskList.map &&\r\n          taskList.map((task, index) => {\r\n            return (\r\n              <Accordion\r\n                square\r\n                expanded={expanded === index}\r\n                onChange={handleChange(index)}\r\n              >\r\n                <AccordionSummary>\r\n                  <Typography>{task.taskType}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <TableContainer component={Paper}>\r\n                      <Table>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell>Task Name</TableCell>\r\n                            <TableCell align=\"center\">\r\n                              Task Description\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">Assigned On</TableCell>\r\n                            <TableCell align=\"center\">Due Date</TableCell>\r\n                            <TableCell align=\"center\">Assigned By</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          <TableRow key={task.taskId}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                              {task.taskName}\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                              {task.taskDescription}\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                              {dateHandler(task.assignedOn)}\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                              {dateHandler(task.dueDate)}\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                              {task.assignUserName}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                    <Box margin={2}>\r\n                      <Typography variant=\"h6\" color=\"secondary\">\r\n                        Start Conversation\r\n                      </Typography>\r\n                    </Box>\r\n                    {task.taskComments.length != 0 && (\r\n                      <>\r\n                        <TableContainer component={Paper}>\r\n                          <Table>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>User</TableCell>\r\n                                <TableCell align=\"center\">Comment</TableCell>\r\n                                <TableCell align=\"center\">Time</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {task.taskComments.map((row) => (\r\n                                <TableRow key={row._id}>\r\n                                  <TableCell>{row.person}</TableCell>\r\n                                  <TableCell align=\"center\">\r\n                                    {row.comment}\r\n                                  </TableCell>\r\n                                  <TableCell align=\"center\">\r\n                                    {dateHandler(row.time)}\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      </>\r\n                    )}\r\n                    <Formik\r\n                      initialValues={{ comment: \"\" }}\r\n                      onSubmit={onSubmit(task.taskId, task.assignUserId)}\r\n                    >\r\n                      {({ submitForm, isSubmitting }) => (\r\n                        <Form>\r\n                          <div className=\"formContainer\">\r\n                            <Box margin={1}>\r\n                              <Field\r\n                                component={TextField}\r\n                                name=\"comment\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                label=\"Add a comment\"\r\n                              />\r\n                            </Box>\r\n                            {isLoading && <LinearProgress color=\"secondary\" />}\r\n                            <Box margin={1}>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disabled={isSubmitting}\r\n                                onClick={submitForm}\r\n                                style={{ margin: \"10px 0 0 0\" }}\r\n                              >\r\n                                Comment\r\n                              </Button>\r\n                            </Box>\r\n                          </div>\r\n                        </Form>\r\n                      )}\r\n                    </Formik>\r\n                  </div>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default VE_myTasks;\r\n",{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","replacedBy":"290"},{"ruleId":"291","severity":1,"message":"292","line":44,"column":6,"nodeType":"293","endLine":44,"endColumn":8,"suggestions":"294"},{"ruleId":"291","severity":1,"message":"295","line":15,"column":6,"nodeType":"293","endLine":15,"endColumn":8,"suggestions":"296"},{"ruleId":"297","severity":1,"message":"298","line":61,"column":39,"nodeType":"299","messageId":"300","endLine":61,"endColumn":40},{"ruleId":"291","severity":1,"message":"301","line":58,"column":6,"nodeType":"293","endLine":58,"endColumn":53,"suggestions":"302"},{"ruleId":"287","replacedBy":"303"},{"ruleId":"289","replacedBy":"304"},{"ruleId":"305","severity":1,"message":"306","line":65,"column":13,"nodeType":"307","endLine":65,"endColumn":29},{"ruleId":"305","severity":1,"message":"306","line":100,"column":13,"nodeType":"307","endLine":100,"endColumn":29},{"ruleId":"291","severity":1,"message":"295","line":15,"column":6,"nodeType":"293","endLine":15,"endColumn":8,"suggestions":"308"},{"ruleId":"291","severity":1,"message":"292","line":17,"column":6,"nodeType":"293","endLine":17,"endColumn":8,"suggestions":"309"},{"ruleId":"305","severity":1,"message":"310","line":37,"column":58,"nodeType":"307","endLine":37,"endColumn":72},{"ruleId":"297","severity":1,"message":"298","line":65,"column":39,"nodeType":"299","messageId":"300","endLine":65,"endColumn":40},{"ruleId":"311","severity":1,"message":"312","line":25,"column":8,"nodeType":"313","messageId":"314","endLine":25,"endColumn":30},{"ruleId":"311","severity":1,"message":"315","line":26,"column":8,"nodeType":"313","messageId":"314","endLine":26,"endColumn":19},{"ruleId":"311","severity":1,"message":"316","line":27,"column":8,"nodeType":"313","messageId":"314","endLine":27,"endColumn":16},{"ruleId":"291","severity":1,"message":"301","line":108,"column":6,"nodeType":"293","endLine":108,"endColumn":53,"suggestions":"317"},{"ruleId":"318","severity":1,"message":"319","line":194,"column":45,"nodeType":"299","messageId":"320","endLine":194,"endColumn":47},{"ruleId":"287","replacedBy":"321"},{"ruleId":"289","replacedBy":"322"},{"ruleId":"311","severity":1,"message":"323","line":1,"column":17,"nodeType":"313","messageId":"314","endLine":1,"endColumn":25},{"ruleId":"311","severity":1,"message":"324","line":1,"column":50,"nodeType":"313","messageId":"314","endLine":1,"endColumn":61},{"ruleId":"311","severity":1,"message":"325","line":2,"column":10,"nodeType":"313","messageId":"314","endLine":2,"endColumn":14},{"ruleId":"291","severity":1,"message":"326","line":31,"column":6,"nodeType":"293","endLine":31,"endColumn":8,"suggestions":"327"},{"ruleId":"311","severity":1,"message":"328","line":19,"column":10,"nodeType":"313","messageId":"314","endLine":19,"endColumn":23},{"ruleId":"291","severity":1,"message":"329","line":40,"column":6,"nodeType":"293","endLine":40,"endColumn":8,"suggestions":"330"},{"ruleId":"287","replacedBy":"331"},{"ruleId":"289","replacedBy":"332"},{"ruleId":"311","severity":1,"message":"333","line":1,"column":8,"nodeType":"313","messageId":"314","endLine":1,"endColumn":13},{"ruleId":"311","severity":1,"message":"334","line":5,"column":24,"nodeType":"313","messageId":"314","endLine":5,"endColumn":33},{"ruleId":"291","severity":1,"message":"292","line":12,"column":6,"nodeType":"293","endLine":12,"endColumn":12,"suggestions":"335"},{"ruleId":"291","severity":1,"message":"329","line":50,"column":6,"nodeType":"293","endLine":50,"endColumn":8,"suggestions":"336"},{"ruleId":"318","severity":1,"message":"337","line":54,"column":31,"nodeType":"299","messageId":"320","endLine":54,"endColumn":33},{"ruleId":"311","severity":1,"message":"338","line":8,"column":9,"nodeType":"313","messageId":"314","endLine":8,"endColumn":13},{"ruleId":"311","severity":1,"message":"334","line":9,"column":24,"nodeType":"313","messageId":"314","endLine":9,"endColumn":33},{"ruleId":"311","severity":1,"message":"339","line":12,"column":20,"nodeType":"313","messageId":"314","endLine":12,"endColumn":31},{"ruleId":"291","severity":1,"message":"340","line":36,"column":6,"nodeType":"293","endLine":36,"endColumn":16,"suggestions":"341"},{"ruleId":"291","severity":1,"message":"301","line":86,"column":6,"nodeType":"293","endLine":86,"endColumn":53,"suggestions":"342"},{"ruleId":"318","severity":1,"message":"319","line":180,"column":47,"nodeType":"299","messageId":"320","endLine":180,"endColumn":49},"no-native-reassign",["343"],"no-negated-in-lhs",["344"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sendRequest'. Either include it or remove the dependency array.","ArrayExpression",["345"],"React Hook useEffect has missing dependencies: 'auth' and 'token'. Either include them or remove the dependency array.",["346"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'auth.userId' and 'sendRequest'. Either include them or remove the dependency array.",["347"],["343"],["344"],"react/jsx-pascal-case","Imported JSX component VE_Workspace must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement",["348"],["349"],"Imported JSX component VE_myTasks must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'AssignmentOutlinedIcon' is defined but never used.","Identifier","unusedVar","'DetailsIcon' is defined but never used.","'ListIcon' is defined but never used.",["350"],"eqeqeq","Expected '!==' and instead saw '!='.","unexpected",["343"],["344"],"'useState' is defined but never used.","'useCallback' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'setAllUsersHandler'. Either include it or remove the dependency array.",["351"],"'useHttpClient' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["352"],["343"],["344"],"'React' is defined but never used.","'isLoading' is assigned a value but never used.",["353"],["354"],"Expected '===' and instead saw '=='.","'auth' is assigned a value but never used.","'setTaskData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'sendRequest'. Either include them or remove the dependency array.",["355"],["356"],"no-global-assign","no-unsafe-negation",{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"359","fix":"363"},{"desc":"357","fix":"364"},{"desc":"361","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"368","fix":"372"},{"desc":"373","fix":"374"},{"desc":"361","fix":"375"},"Update the dependencies array to be: [sendRequest]",{"range":"376","text":"377"},"Update the dependencies array to be: [auth, token]",{"range":"378","text":"379"},"Update the dependencies array to be: [taskContext.allTasks, taskContext.allComments, sendRequest, auth.userId]",{"range":"380","text":"381"},{"range":"382","text":"379"},{"range":"383","text":"377"},{"range":"384","text":"381"},"Update the dependencies array to be: [setAllUsersHandler]",{"range":"385","text":"386"},"Update the dependencies array to be: [userId]",{"range":"387","text":"388"},"Update the dependencies array to be: [data, sendRequest]",{"range":"389","text":"390"},{"range":"391","text":"388"},"Update the dependencies array to be: [history, sendRequest, taskData]",{"range":"392","text":"393"},{"range":"394","text":"381"},[1452,1454],"[sendRequest]",[393,395],"[auth, token]",[1697,1744],"[taskContext.allTasks, taskContext.allComments, sendRequest, auth.userId]",[393,395],[643,645],[2745,2792],[784,786],"[setAllUsersHandler]",[1032,1034],"[userId]",[433,439],"[data, sendRequest]",[1540,1542],[1082,1092],"[history, sendRequest, taskData]",[2278,2325]]